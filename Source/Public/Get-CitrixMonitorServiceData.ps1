function Get-CitrixMonitorServiceData {

    <#
    .SYNOPSIS
    Returns Citrix Virtual Apps & Desktops usage data over a period of time.

    .DESCRIPTION
    The Get-CitrixMonitorServiceData cmdlet gets an object with usage data (sessions, number of virtual machines)
    of a Citrix Virtual Apps & Desktops Site over an specified period of time.

    This cmdlet takes a required parameter: a list of Citrix Virtual Apps & Desktops Delivery Controllers.
    Without any other parameters, it will use the current user to connect to the DDCs and collect usage information
    for the past day.
    
    It will return a custom object with session, user, login times and number of VMs for every Delivery Group
    present on the selected Site.

    Additional filters can be applied to select a different date range.

    .LINK
    https://github.com/karjona/citrix-odata

    .PARAMETER DeliveryControllers
    Specifies a single Citrix Virtual Apps & Desktops Delivery Controller or an array of Citrix DDCs from
    different Sites to collect data from.

    .PARAMETER Credential
    Specifies a user account that has permission to send the request. The default is the current user. A minimum of
    read-only administrator permissions on Citrix Virtual Apps & Desktops are required to collect this data.

    Enter a PSCredential object, such as one generated by the Get-Credential cmdlet.

    .PARAMETER StartDate
    Specifies the start date for the report in yyyy-MM-ddTHH:mm:ss. If you omit the time part, 00:00:00 will be
    automatically appended to the date.

    The default value is yesterday's date, midnight.

    .PARAMETER EndDate
    Specifies the end date for the report in yyyy-MM-ddTHH:mm:ss. If you omit the time part, 23:59:59 will be
    automatically appended to the date.

    The default value is yesterday's date, 23:59:59.

    .EXAMPLE
    Get-CitrixMonitorServiceData -DeliveryControllers $ddcs = @('myddc01.example.com', 'myddc02.example.com') ` -Credential Get-Credential

    Example 1: Get the usage data for the past day
    Returns the usage data for all Delivery Groups present on myddc01 and myddc02 Delivery Controllers using the
    specified credentials. The returned custom object will contain yesterday's usage data.

    .COMPONENT
    citrix-odata
    #>

    [CmdletBinding()]
    [OutputType('PSCustomObject')]

    param(
        [Parameter(Mandatory=$true, ValueFromPipeline=$true, Position=0, HelpMessage='Enter one or more Delivery' +
        ' Controllers separated by commas.')]
        [Alias('ComputerName')]
        [String[]]
        $DeliveryControllers,

        [Parameter()]
        [PSCredential]
        $Credential,

        [Parameter()]
        [DateTime]
        $StartDate = "$(Get-Date (Get-Date).AddDays(-1) -Format 'yyyy-MM-ddT00:00:00')",

        [Parameter()]
        [DateTime]
        $EndDate = "$(Get-Date (Get-Date).AddDays(-1) -Format 'yyyy-MM-ddT23:59:59')"
    )

    begin {
        # Test if Delivery Controllers are reachable and credentials are valid
        # Delivery Controllers that do not respond or that have invalid credentials will be removed from the list
        # If no Delivery Controllers are left after the validation, the cmdlet execution is halted
        foreach ($ddc in $DeliveryControllers) {
            try {
                if (!$Credential) {
                    $TestConnectionRequest = Invoke-RestMethod -Uri "http://$ddc/Citrix/Monitor/OData/v3/Data/" `
                    -UseDefaultCredentials
                } else {
                    $TestConnectionRequest = Invoke-RestMethod -Uri "http://$ddc/Citrix/Monitor/OData/v3/Data/" `
                    -Credential $Credential
                }
            } catch {
                $ConnectionError = $_
                # Handle 401 (invalid credentials) error
                if ($ConnectionError.Exception.Response.StatusCode) {
                    if ($ConnectionError.Exception.Response.StatusCode.ToString() -eq 'Unauthorized') {
                        if (!$Credential) {
                            Write-Error ("The current user does not have at least read-only administrator " +
                            "permissions on $ddc.")
                        } else {
                            Write-Error ("The supplied credentials do not have at least read-only administrator " +
                            "permissions on $ddc.")
                        }
                    # There's a web server on that address, but responded with an error
                    } else {
                        Write-Error ("The server on $ddc responded with an error: " +
                        "$($ConnectionError.Exception.Message)")
                    }
                } else {
                    # Handle DNS resolution errors
                    if ($ConnectionError.Exception.Status.ToString() -eq 'NameResolutionFailure') {
                        Write-Error "Could not find host $ddc."
                    # Handle all other errors
                    } else {
                        Write-Error ("An error occurred while trying to connect to $ddc. Check network " +
                        "connectivity and that the specified host is a Citrix Delivery Controller.`r`n" +
                        "$($ConnectionError.Exception.Message)")
                    }
                }
                # Remove the failed DDC from the DDCs list
                $DeliveryControllers = $DeliveryControllers | Where-Object -FilterScript {$_ -ne $ddc}
            } finally {
                if (!$DeliveryControllers) {
                    throw "Could not connect to any of the specified Delivery Controllers."
                }
            }
        }
    }

    process {
        Write-Host $DeliveryControllers
        Write-Host $StartDate
        Write-Host $EndDate
    }
}
